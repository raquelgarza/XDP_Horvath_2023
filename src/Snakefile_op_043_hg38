# -*- coding: utf-8 -*-

# lunarc configuration file
# configuration file with sample list (yaml list)

import os

WD = "/projects/fs1/jakobssonlab/xdp_wg_ont/" # Needs to be at RD if you are running the singularity...
RD = "/projects/fs5/jakobssonlab/op_043/"
configfile: "/projects/fs1/jakobssonlab/xdp_wg_ont/src/config_files/config_op_043.json"

SAMPLES = config["samples"]
#TES = config["TEs"]
geneGTF = "/projects/fs3/raquelgg/annotations/hg38/gencode/v38/gencode.v38.annotation.gtf"
teGTF = "/projects/fs3/raquelgg/annotations/hg38/repeatmasker/hg38_rmsk_TEtranscripts.gtf"
teBED = "/projects/fs3/raquelgg/annotations/hg38/repeatmasker/hg38_rmsk_TEtranscripts.bed"

# Run as:
# snakemake -j 5 --cluster-config /projects/fs1/jakobssonlab/xdp_wg_ont/src/config_files/lunarc_config.json --cluster "sbatch -A {cluster.account} -p {cluster.partition} --tasks-per-node {cluster.tasks-per-node}  -t {cluster.time} -o {cluster.output} -e {cluster.error} -J {cluster.job-name} -N {cluster.nodes}" --latency-wait 60

rule all:
    input: 
        os.path.join(WD, "5_tldr/op_043.table.txt")

rule nanopolish_index:
    input:
        fq = os.path.join(RD, "data/{sample}.fastq.gz")
    params:
        fast5 = os.path.join(RD, "OP043_NGI12051_20220316_ANP/op_043/rawdata/{sample}/fast5_pass")
    output:
        fq_index = os.path.join(RD, "data/{sample}.fastq.gz.index") 
    shell:
        """
        ml GCC/10.2.0  OpenMPI/4.0.5 nanopolish/0.13.3

        nanopolish index -d {params.fast5} {input}

        module purge
        """

rule map:
    input:
        fq = os.path.join(RD, "data/{sample}.fastq.gz"), 
        fq_index = os.path.join(RD, "data/{sample}.fastq.gz.index"),
        index = "/projects/fs5/jakobssonlab/hg38_minimap2_index_XDP_ont/xdp_hg38.mmi"
    output:
        os.path.join(WD, "1_mapping/{sample}.bam")
    shell:
        """
        ml GCCcore/11.2.0 minimap2/2.24

        date

        echo "Start 1_mapping!"

        minimap2 -t 20 -a -x map-ont {input.index} {input.fq} > {output}

        date

        module purge
        """

rule sort:
    input:
        os.path.join(WD, "1_mapping/{sample}.bam")
    output:
        os.path.join(WD, "1_mapping/{sample}.sorted.bam")
    shell:
        """
        ml GCC/11.3.0 SAMtools/1.16.1

        samtools sort -o {output} {input}

        module purge
        """

rule filter_chrs:
    input:
        bam = os.path.join(WD, "1_mapping/{sample}.sorted.bam")
    output:
        bam = os.path.join(WD, "1_mapping/{sample}.validchrs.sorted.bam")
    shell:
        """
        ml GCC/11.3.0 SAMtools/1.16.1

        samtools view -b -L validchrs.bed {input.bam} > {output.bam}

        module purge
        """

rule index:
    input:
        os.path.join(WD, "1_mapping/{sample}.validchrs.sorted.bam"),
        os.path.join(WD, "1_mapping/{sample}.sorted.bam")
    output:
        os.path.join(WD, "1_mapping/{sample}.validchrs.sorted.bam.bai"),
        os.path.join(WD, "1_mapping/{sample}.sorted.bam.bai")
    shell:
        """
        ml GCC/11.3.0 SAMtools/1.16.1

        samtools index {input[0]}
        samtools index {input[1]}

        module purge
        """

rule polymorphic_TEs:
    input:
        bam = expand(os.path.join(WD, "1_mapping/{sample}.validchrs.sorted.bam"), sample=SAMPLES),
        bai = expand(os.path.join(WD, "1_mapping/{sample}.validchrs.sorted.bam.bai"), sample=SAMPLES),
        te_ref = "/projects/fs1/jakobssonlab/xdp_wg_ont/resources/teref.human.fa",
        ref = "/projects/fs3/jakobssonlab/annotations/hg38/gencode/GRCh38.p13/GRCh38.p13.genome.fa"
    params:
        outpath = os.path.join(WD, "5_tldr/op_043"),
        files=lambda wildcards, input: ','.join(input.bam)
    output:
        table = os.path.join(WD, "5_tldr/op_043.table.txt")
    shell:
        """
        ml GCC/11.3.0  OpenMPI/4.1.4 tldr/1.2.2

        tldr --extend_consensus 0 --detail_output -b {params.files} -e {input.te_ref} -r {input.ref} -o {params.outpath} 
        module purge
        """


